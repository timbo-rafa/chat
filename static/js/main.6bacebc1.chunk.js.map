{"version":3,"sources":["components/Message.js","components/MessageList.js","components/SendMessageForm.js","components/RoomList.js","components/NewRoomForm.js","App.js","config.js","index.js"],"names":["Message","props","message","messageStyle","console","log","parts","payload","content","user","senderId","map","part","idx","partType","key","className","MessageList","node","ReactDOM","findDOMNode","this","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","roomId","messages","index","id","React","Component","SendMessageForm","state","handleChange","bind","handleSubmit","e","setState","target","value","preventDefault","sendMessage","onSubmit","disabled","onChange","placeholder","type","RoomList","orderedRooms","rooms","sort","r1","r2","name","localeCompare","room","active","onClick","subscribeToRoom","href","NewRoomForm","roomName","createRoom","required","App","joinableRooms","joinedRooms","getRooms","params","qs","location","search","length","Chatkit","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","catch","err","getJoinableRooms","subscribeToRoomMultipart","hooks","onMessage","onUserStartedTyping","onUserStoppedTyping","text","sendSimpleMessage","render","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.6bacebc1.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Message(props) {\n    const message = props.message\n\n    let messageStyle = \"message-text\"\n\n    console.log(message.parts[0].payload.content, props, props.user === message.senderId)\n    if (props.user === message.senderId) {\n        messageStyle = \"message-text-self\"\n    }\n\n    return (\n        <>\n        {message.parts.map((part,idx) => {\n        if (part.partType === \"inline\") {\n            return (\n                <div key={idx} className=\"message\">\n                    <div className=\"message-username\">{message.senderId}</div>\n                    <div className={messageStyle}>{part.payload.content}</div>\n                </div>\n            )\n        } else return null;\n        })}\n        </>\n    )\n}\n\nexport default Message","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Message from './Message'\n\nclass MessageList extends React.Component {\n    \n    UNSAFE_componentWillUpdate() {\n        const node = ReactDOM.findDOMNode(this)\n        this.shouldScrollToBottom = node.scrollTop + node.clientHeight + 100 >= node.scrollHeight\n    }\n    \n    componentDidUpdate() {\n        if (this.shouldScrollToBottom) {\n            const node = ReactDOM.findDOMNode(this)\n            node.scrollTop = node.scrollHeight   \n        }\n    }\n    \n    render() {\n        if (!this.props.roomId) {\n            return (\n                <div className=\"message-list\">\n                    <div className=\"join-room\">\n                        &larr; Join a room!\n                    </div>\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"message-list\">\n                {this.props.messages.map((message, index) => {\n                    return (\n                        <Message key={message.id} user={this.props.user} message={message} />\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\nexport default MessageList","import React from 'react'\n\nclass SendMessageForm extends React.Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            message: ''\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    \n    handleChange(e) {\n        this.setState({\n            message: e.target.value\n        })\n    }\n    \n    handleSubmit(e) {\n        e.preventDefault()\n        this.props.sendMessage(this.state.message)\n        this.setState({\n            message: ''\n        })\n    }\n    \n    render() {\n        return (\n            <form\n                onSubmit={this.handleSubmit}\n                className=\"send-message-form\">\n                <input\n                    disabled={this.props.disabled}\n                    onChange={this.handleChange}\n                    value={this.state.message}\n                    placeholder=\"Type your message and hit ENTER\"\n                    type=\"text\" />\n            </form>\n        )\n    }\n}\n\nexport default SendMessageForm","import React from 'react'\n\nclass RoomList extends React.Component {\n    render () {\n        const orderedRooms = [...this.props.rooms].sort((r1, r2) => r1.name.localeCompare(r2.name))\n        return (\n            <div className=\"rooms-list\">\n                <ul>\n                <h3>Your rooms:</h3>\n                    {orderedRooms.map(room => {\n                        const active = room.id === this.props.roomId ? 'active' : '';\n                        return (\n                            <li key={room.id} className={\"room \" + active}>\n                                <div onClick={() => this.props.subscribeToRoom(room.id)}\n                                   href=\"#\">\n                                   # {room.name}\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default RoomList","import React from 'react'\n\nclass NewRoomForm extends React.Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            roomName: ''\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    \n    handleChange(e) {\n        this.setState({\n            roomName: e.target.value\n        })\n    }\n    \n    handleSubmit(e) {\n        e.preventDefault()\n        this.props.createRoom(this.state.roomName)\n        this.setState({roomName: ''})\n    }\n    \n    render () {\n        return (\n            <div className=\"new-room-form\">\n                <form onSubmit={this.handleSubmit}>\n                    <input\n                        value={this.state.roomName}\n                        onChange={this.handleChange}\n                        type=\"text\" \n                        placeholder=\"Create a room\" \n                        required />\n                    <button id=\"create-room-btn\" type=\"submit\">+</button>\n            </form>\n        </div>\n        )\n    }\n}\n\nexport default NewRoomForm","import React from 'react'\nimport * as qs from 'query-string'\nimport Chatkit from '@pusher/chatkit-client'\nimport MessageList from './components/MessageList'\nimport SendMessageForm from './components/SendMessageForm'\nimport RoomList from './components/RoomList'\nimport NewRoomForm from './components/NewRoomForm'\n\nimport './App.css'\n\nimport { tokenUrl, instanceLocator } from './config'\n\nclass App extends React.Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            roomId: null,\n            messages: [],\n            joinableRooms: [],\n            joinedRooms: []\n        }\n        this.sendMessage = this.sendMessage.bind(this)\n        this.subscribeToRoom = this.subscribeToRoom.bind(this)\n        this.getRooms = this.getRooms.bind(this)\n        this.createRoom = this.createRoom.bind(this)\n    } \n    \n    componentDidMount() {\n        const params = qs.parse(this.props.location.search)\n\n        let user = 'anonymous'\n        if (params.user && params.user.length > 0) {\n            user = params.user\n        }\n\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator,\n            userId: user,\n            tokenProvider: new Chatkit.TokenProvider({\n                url: tokenUrl\n            })\n        })\n        \n        chatManager.connect()\n        .then(currentUser => {\n            this.currentUser = currentUser\n            this.getRooms()\n            console.log(this.currentUser)\n        })\n        .catch(err => console.log('error on connecting: ', err))\n    }\n    \n    getRooms() {\n        this.currentUser.getJoinableRooms()\n        .then(joinableRooms => {\n            this.setState({\n                joinableRooms,\n                joinedRooms: this.currentUser.rooms\n            })\n        })\n        .catch(err => console.log('error on joinableRooms: ', err))\n    }\n    \n    subscribeToRoom(roomId) {\n        this.setState({ messages: [] })\n        this.currentUser.subscribeToRoomMultipart({\n            roomId: roomId,\n            hooks: {\n                onMessage: message => {\n                    this.setState({\n                        messages: [...this.state.messages, message]\n                    })\n                },\n                onUserStartedTyping: user => {\n                    console.log(`User ${user.name} started typing`)\n                },\n                onUserStoppedTyping: user => {\n                    console.log(`User ${user.name} stopped typing`)\n                }\n            }\n        })\n        .then(room => {\n            this.setState({\n                roomId: room.id\n            })\n            this.getRooms()\n        })\n        .catch(err => console.log('error on subscribing to room: ', err))\n    }\n    \n    sendMessage(text) {\n        this.currentUser.sendSimpleMessage({\n            text,\n            roomId: this.state.roomId\n        })\n    }\n    \n    createRoom(name) {\n        this.currentUser.createRoom({\n            name\n        })\n        .then(room => this.subscribeToRoom(room.id))\n        .catch(err => console.log('error with createRoom: ', err))\n    }\n    \n    render() {\n        return (\n            <div className=\"app\">\n                <RoomList\n                    subscribeToRoom={this.subscribeToRoom}\n                    rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}\n                    roomId={this.state.roomId} />\n                <MessageList\n                    user={this.currentUser?.id || \"anonymous\"} \n                    roomId={this.state.roomId}\n                    messages={this.state.messages} />\n                <SendMessageForm\n                    disabled={!this.state.roomId}\n                    sendMessage={this.sendMessage} />\n                <NewRoomForm createRoom={this.createRoom} />\n            </div>\n        );\n    }\n}\n\nexport default App","const tokenUrl = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/409e9366-28dc-408e-ab5c-3154b983237b/token\";\nconst instanceLocator = \"v1:us1:409e9366-28dc-408e-ab5c-3154b983237b\";\n\nexport { tokenUrl, instanceLocator }","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Helmet from 'react-helmet';\n\nimport {BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport App from './App';\n\nReactDOM.render(\n    \n    <Router>\n        <Helmet>\n            <title>Chat</title>\n        </Helmet>\n        <Route exact path=\"/\" component={App}>\n        </Route>\n    </Router>\n    \n    , document.getElementById('root'));"],"sourceRoot":""}